AWSTemplateFormatVersion: "2010-09-09"
Metadata:
  Generator: "former2"
Description: ""
Parameters:
  FunctionName:
    Type: String
    Description: "Lambda Function Name"
  ResourceName:
    Type: String
    Description: "API Resource Name"
Resources:
  ApiGatewayRestApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: !Sub "${ResourceName}"
      ApiKeySourceType: "HEADER"
      EndpointConfiguration:
        Types:
          - "EDGE"

  ApiGatewayResourceTodo:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      PathPart: !Sub "${ResourceName}"
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId

  ApiGatewayMethod2Validator:
    Type: "AWS::ApiGateway::RequestValidator"
    Properties:
      Name: ApiGatewayMethod2Valid
      RestApiId: !Ref ApiGatewayRestApi
      ValidateRequestParameters: true

  ApiGatewayMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResourceTodo
      HttpMethod: "POST"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      RequestParameters: {}
      MethodResponses:
        - ResponseModels:
            "application/json": "Empty"
          StatusCode: "200"
        - StatusCode: "400"
        - StatusCode: "401"
        - StatusCode: "403"
        - StatusCode: "500"
      Integration:
        CacheNamespace: !Ref ApiGatewayResourceTodo
        ContentHandling: "CONVERT_TO_TEXT"
        IntegrationHttpMethod: "POST"
        IntegrationResponses:
          - ResponseTemplates:
              "application/json": "$input.path('$.body')"
            SelectionPattern: ""
            StatusCode: "200"
          - ResponseTemplates:
              "application/json": "$input.path('$.errorMessage')"
            SelectionPattern: '.*\"statusCode\":400.*'
            StatusCode: "400"
          - ResponseTemplates:
              "application/json": "$input.path('$.errorMessage')"
            SelectionPattern: '.*\"statusCode\":401.*'
            StatusCode: "401"
          - ResponseTemplates:
              "application/json": "$input.path('$.errorMessage')"
            SelectionPattern: '.*\"statusCode\":403.*'
            StatusCode: "403"
          - ResponseTemplates:
              "application/json": "$input.path('$.errorMessage')"
            SelectionPattern: '.*\"statusCode\":500.*'
            StatusCode: "500"
        PassthroughBehavior: "WHEN_NO_MATCH"
        TimeoutInMillis: 29000
        Type: "AWS"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FunctionName}/invocations"

  ApiGatewayMethod2:
    Type: "AWS::ApiGateway::Method"
    DependsOn: "ApiGatewayMethod2Validator"
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResourceTodo
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      RequestValidatorId: !Ref ApiGatewayMethod2Validator
      RequestParameters:
        "method.request.querystring.userIds": true
      MethodResponses:
        - ResponseModels:
            "application/json": "Empty"
          StatusCode: "200"
        - StatusCode: "400"
        - StatusCode: "401"
        - StatusCode: "403"
        - StatusCode: "500"
      Integration:
        CacheNamespace: !Ref ApiGatewayResourceTodo
        IntegrationHttpMethod: "POST"
        IntegrationResponses:
          - ResponseTemplates:
              "application/json": "$input.path('$.body')"
            SelectionPattern: ""
            StatusCode: "200"
          - ResponseTemplates:
              "application/json": "$input.path('$.errorMessage')"
            SelectionPattern: '.*\"statusCode\":400.*'
            StatusCode: "400"
          - ResponseTemplates:
              "application/json": "$input.path('$.errorMessage')"
            SelectionPattern: '.*\"statusCode\":401.*'
            StatusCode: "401"
          - ResponseTemplates:
              "application/json": "$input.path('$.errorMessage')"
            SelectionPattern: '.*\"statusCode\":403.*'
            StatusCode: "403"
          - ResponseTemplates:
              "application/json": "$input.path('$.errorMessage')"
            SelectionPattern: '.*\"statusCode\":500.*'
            StatusCode: "500"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates:
          "application/json": |
            {
              "userIds": "$input.params('userIds')"
            }
        TimeoutInMillis: 29000
        Type: "AWS"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FunctionName}/invocations"
  ApiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn: "ApiGatewayMethod2"
    Properties:
      StageName: "api"
      RestApiId: !Ref ApiGatewayRestApi
